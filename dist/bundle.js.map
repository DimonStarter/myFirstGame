{"version":3,"file":"bundle.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,aAAa;AAC9D;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK,GAAG;;AAER;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;;AAEA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;AC7NA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,aAAa;AAC9D;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,aAAa;AAC9D;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,YAAY;;AAE1D;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;ACpFA","sources":["webpack://packforcardgame/webpack/bootstrap","webpack://packforcardgame/webpack/runtime/make namespace object","webpack://packforcardgame/./cardGame/startPage.js","webpack://packforcardgame/./cardGame/easyChallenge.js","webpack://packforcardgame/./cardGame/mediumChallenge.js","webpack://packforcardgame/./cardGame/hardChallenge.js","webpack://packforcardgame/./cardGame/lib/request.js","webpack://packforcardgame/./cardGame/style.css?0f56"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-undef */\n\nfunction renderStartButton(container) {\n    const startButton = document.createElement(\"button\");\n\n    startButton.textContent = \"Старт\";\n    startButton.classList.add(\"start-button\", \"btn\");\n\n    startButton.addEventListener(\"click\", () => {\n        if (window.application.challenge === \"\") {\n            alert(\"Выберите уровень сложности!\");\n        } else {\n            if (window.application.challenge === \"easy\") {\n                window.application.renderScreen(\"easy\");\n            } else if (window.application.challenge === \"medium\") {\n                window.application.renderScreen(\"medium\");\n            } else if (window.application.challenge === \"hard\") {\n                window.application.renderScreen(\"hard\");\n            } else {\n                console.log(`Ошибка, обновите страницу!`);\n            }\n        }\n    });\n\n    container.appendChild(startButton);\n}\n\nwindow.application.blocks[\"StartButton\"] = renderStartButton;\n\nfunction renderStartScreen() {\n    container.textContent = \"\";\n\n    const menu = document.createElement(\"div\");\n    menu.classList.add(\"menu\");\n\n    const title = document.createElement(\"h1\");\n    title.classList.add(\"title\");\n    title.textContent = \"Выбери сложность\";\n\n    const pickerChalenge = document.createElement(\"div\");\n    pickerChalenge.classList.add(\"picker-challenge\");\n\n    const buttonFirst = document.createElement(\"button\");\n    buttonFirst.classList.add(\"button\", \"FirstChallenge\");\n    buttonFirst.textContent = \"1\";\n\n    buttonFirst.addEventListener(\"click\", () => {\n        window.application.challenge = \"easy\";\n        buttonFirst.classList.remove(\"button\");\n        buttonFirst.classList.add(\"selected\");\n\n        if (\n            buttonSecond.classList.contains(\"selected\") ||\n            buttonThird.classList.contains(\"selected\")\n        ) {\n            buttonSecond.classList.remove(\"selected\");\n            buttonThird.classList.remove(\"selected\");\n            buttonSecond.classList.add(\"button\");\n            buttonThird.classList.add(\"button\");\n        }\n    });\n\n    const buttonSecond = document.createElement(\"button\");\n    buttonSecond.classList.add(\"button\", \"SecondChallenge\");\n    buttonSecond.textContent = \"2\";\n\n    buttonSecond.addEventListener(\"click\", () => {\n        window.application.challenge = \"medium\";\n        buttonSecond.classList.remove(\"button\");\n        buttonSecond.classList.add(\"selected\");\n\n        if (\n            buttonFirst.classList.contains(\"selected\") ||\n            buttonThird.classList.contains(\"selected\")\n        ) {\n            buttonFirst.classList.remove(\"selected\");\n            buttonThird.classList.remove(\"selected\");\n            buttonFirst.classList.add(\"button\");\n            buttonThird.classList.add(\"button\");\n        }\n    });\n\n    const buttonThird = document.createElement(\"button\");\n    buttonThird.classList.add(\"button\", \"ThirdChallenge\");\n    buttonThird.textContent = \"3\";\n\n    buttonThird.addEventListener(\"click\", () => {\n        window.application.challenge = \"hard\";\n        buttonThird.classList.remove(\"button\");\n        buttonThird.classList.add(\"selected\");\n\n        if (\n            buttonFirst.classList.contains(\"selected\") ||\n            buttonThird.classList.contains(\"selected\")\n        ) {\n            buttonFirst.classList.remove(\"selected\");\n            buttonSecond.classList.remove(\"selected\");\n            buttonFirst.classList.add(\"button\");\n            buttonSecond.classList.add(\"button\");\n        }\n    });\n\n    container.appendChild(menu);\n    menu.appendChild(title);\n    menu.appendChild(pickerChalenge);\n    pickerChalenge.appendChild(buttonFirst);\n    pickerChalenge.appendChild(buttonSecond);\n    pickerChalenge.appendChild(buttonThird);\n\n    window.application.renderBlock(\"StartButton\", menu);\n}\n\nwindow.application.screens[\"start\"] = renderStartScreen;\n\nwindow.application.renderScreen(\"start\");\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\nfunction generatingEasyCards(container) {\n    const battleField = document.createElement(\"div\");\n    battleField.classList.add(\"battle-field\");\n\n    const scene = document.createElement(\"div\");\n    scene.classList.add(\"scene\");\n\n    let cardData = [];\n\n    function generateRandomCards() {\n        let cardListRandom = shuffledCardList.sort(() => Math.random() - 0.5);\n        for (let i = 0; i < 3; i++) {\n            cardData.push(cardListRandom[i]);\n        }\n        cardData = cardData.concat(cardData);\n    }\n\n    function createCard(cardData) {\n        const card = document.createElement(\"div\");\n        card.classList.add(\"CARD\");\n\n        const cardFront = document.createElement(\"div\");\n        cardFront.classList.add(\"card-face\", \"card-face-front\");\n        card.append(cardFront);\n\n        const cardBack = document.createElement(\"div\");\n        cardBack.classList.add(\"card-face\", \"card-face-back\");\n        cardBack.style.backgroundImage = `url(\"${cardData.img}\")`;\n        card.append(cardBack);\n\n        card.addEventListener(\"click\", function () {\n            card.classList.toggle(\"is-flipped\");\n        });\n\n        return card;\n    }\n\n    function renderCards() {\n        cardData.forEach((cardEl) => {\n            const card = createCard(cardEl);\n            scene.append(card);\n        });\n    }\n    generateRandomCards();\n    renderCards();\n\n    scene.querySelectorAll(\".CARD\").forEach((card) => {\n        console.log(card);\n        card.classList.add(\"is-flipped\");\n        setTimeout(() => {\n            card.classList.remove(\"is-flipped\");\n        }, 5000);\n    });\n\n    /* const CARD = document.createElement(\"div\");\n    CARD.classList.add(\"CARD\");\n\n    const cardFront = document.createElement(\"div\");\n    cardFront.classList.add(\"card-face\", \"card-face-front\");\n\n    const cardBack = document.createElement(\"div\");\n    cardBack.classList.add(\"card-face\", \"card-face-back\");\n\n    CARD.addEventListener(\"click\", function () {\n        CARD.classList.toggle(\"is-flipped\");\n    });\n\n    const CARDTWO = document.createElement(\"div\");\n    CARDTWO.classList.add(\"CARD\");\n\n    const CARDTWOFRONT = document.createElement(\"div\");\n    CARDTWOFRONT.classList.add(\"card-face\", \"card-face-front\");\n\n    const CARDTWOBACK = document.createElement(\"div\");\n    CARDTWOBACK.classList.add(\"card-face\", \"card-face-back\");\n\n    CARDTWO.addEventListener(\"click\", function () {\n        CARDTWO.classList.toggle(\"is-flipped\");\n    });\n\n    const CARDTHREE = document.createElement(\"div\");\n    CARDTHREE.classList.add(\"CARD\");\n\n    const CARDTHREEFRONT = document.createElement(\"div\");\n    CARDTHREEFRONT.classList.add(\"card-face\", \"card-face-front\");\n\n    const CARDTHREEBACK = document.createElement(\"div\");\n    CARDTHREEBACK.classList.add(\"card-face\", \"card-face-back\");\n\n    CARDTHREE.addEventListener(\"click\", function () {\n        CARDTHREE.classList.toggle(\"is-flipped\");\n    });\n\n    const CARDFOUR = document.createElement(\"div\");\n    CARDFOUR.classList.add(\"CARD\");\n\n    const CARDFOURFRONT = document.createElement(\"div\");\n    CARDFOURFRONT.classList.add(\"card-face\", \"card-face-front\");\n\n    const CARDFOURBACK = document.createElement(\"div\");\n    CARDFOURBACK.classList.add(\"card-face\", \"card-face-back\");\n\n    CARDFOUR.addEventListener(\"click\", function () {\n        CARDFOUR.classList.toggle(\"is-flipped\");\n    });\n\n    const CARDFIVE = document.createElement(\"div\");\n    CARDFIVE.classList.add(\"CARD\");\n\n    const CARDFIVEFRONT = document.createElement(\"div\");\n    CARDFIVEFRONT.classList.add(\"card-face\", \"card-face-front\");\n\n    const CARDFIVEBACK = document.createElement(\"div\");\n    CARDFIVEBACK.classList.add(\"card-face\", \"card-face-back\");\n\n    CARDFIVE.addEventListener(\"click\", function () {\n        CARDFIVE.classList.toggle(\"is-flipped\");\n    });\n\n    const CARDSIX = document.createElement(\"div\");\n    CARDSIX.classList.add(\"CARD\");\n\n    const CARDSIXFRONT = document.createElement(\"div\");\n    CARDSIXFRONT.classList.add(\"card-face\", \"card-face-front\");\n\n    const CARDSIXBACK = document.createElement(\"div\");\n    CARDSIXBACK.classList.add(\"card-face\", \"card-face-back\");\n\n    CARDSIX.addEventListener(\"click\", function () {\n        CARDSIX.classList.toggle(\"is-flipped\");\n    }); */\n\n    container.appendChild(battleField);\n    battleField.appendChild(scene);\n    /* scene.appendChild(CARD); */\n    /* scene.appendChild(CARDTWO);\n    scene.appendChild(CARDTHREE);\n    scene.appendChild(CARDFOUR);\n    scene.appendChild(CARDFIVE);\n    scene.appendChild(CARDSIX);\n    CARD.appendChild(cardFront);\n    CARD.appendChild(cardBack);\n    CARDTWO.appendChild(CARDTWOFRONT);\n    CARDTWO.appendChild(CARDTWOBACK);\n    CARDTHREE.appendChild(CARDTHREEFRONT);\n    CARDTHREE.appendChild(CARDTHREEBACK);\n    CARDFOUR.appendChild(CARDFOURFRONT);\n    CARDFOUR.appendChild(CARDFOURBACK);\n    CARDFIVE.appendChild(CARDFIVEFRONT);\n    CARDFIVE.appendChild(CARDFIVEBACK);\n    CARDSIX.appendChild(CARDSIXFRONT);\n    CARDSIX.appendChild(CARDSIXBACK); */\n\n    // let randomCards = generateRandomCards();\n\n    //     randomCards\n\n    //     randomCards.forEach(element => {\n    //         element.map((user) => user.name).join(\", \");\n    //         console.log(element);\n    //     });\n}\n\nwindow.application.blocks[\"generateEasyCards\"] = generatingEasyCards;\n\nfunction renderScreenEasyChallenge() {\n    container.textContent = \" \";\n\n    const header = document.createElement(\"div\");\n    header.classList.add(\"header\");\n\n    const buttonTime = document.createElement(\"button\");\n    buttonTime.classList.add(\"btn\", \"timer-button\");\n    buttonTime.textContent = \"старт/сбросить\";\n\n    let secs,\n        now,\n        timer,\n        mins = 0;\n\n    const timerField = document.createElement(\"span\");\n    timerField.classList.add(\"timer-field\");\n    timerField.textContent = \"0:00\";\n\n    function time() {\n        secs = Math.floor((Date.now() - now) / 1000);\n        if (secs === 60) {\n            now = Date.now();\n            mins++;\n        }\n        if (secs < 10) {\n            secs = \"0\" + secs;\n        }\n        timerField.innerHTML = mins + \":\" + secs;\n    }\n\n    buttonTime.onclick = function () {\n        now = Date.now();\n        mins = 0;\n        timer = setInterval(time);\n    };\n\n    const tryAgainButton = document.createElement(\"button\");\n    tryAgainButton.classList.add(\"btn\", \"try-again-button\");\n    tryAgainButton.textContent = \"Начать заново\";\n\n    tryAgainButton.addEventListener(\"click\", () => {\n        window.application.challenge = \"\";\n        window.application.renderScreen(\"start\");\n    });\n\n    container.appendChild(header);\n    header.appendChild(buttonTime);\n    header.appendChild(timerField);\n    header.appendChild(tryAgainButton);\n\n    window.application.renderBlock(\"generateEasyCards\", container);\n}\n\nwindow.application.screens[\"easy\"] = renderScreenEasyChallenge;\n","/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\nfunction generatingMediumCards(container) {\n    const battleField = document.createElement(\"div\");\n    battleField.classList.add(\"battle-field\");\n\n    const scene = document.createElement(\"div\");\n    scene.classList.add(\"scene\");\n\n    let cardData = [];\n\n    function generateRandomCards() {\n        let cardListRandom = shuffledCardList.sort(() => Math.random() - 0.5);\n        for (let i = 0; i < 6; i++) {\n            cardData.push(cardListRandom[i]);\n        }\n        cardData = cardData.concat(cardData);\n    }\n\n    function createCard(cardData) {\n        const card = document.createElement(\"div\");\n        card.classList.add(\"CARD\");\n\n        const cardFront = document.createElement(\"div\");\n        cardFront.classList.add(\"card-face\", \"card-face-front\");\n        card.append(cardFront);\n\n        const cardBack = document.createElement(\"div\");\n        cardBack.classList.add(\"card-face\", \"card-face-back\");\n        cardBack.style.backgroundImage = `url(\"${cardData.img}\")`;\n        card.append(cardBack);\n\n        card.addEventListener(\"click\", function () {\n            card.classList.toggle(\"is-flipped\");\n        });\n\n        return card;\n    }\n\n    function renderCards() {\n        cardData.forEach((cardEl) => {\n            const card = createCard(cardEl);\n            scene.append(card);\n        });\n    }\n    generateRandomCards();\n    renderCards();\n\n    scene.querySelectorAll(\".CARD\").forEach((card) => {\n        console.log(card);\n        card.classList.add(\"is-flipped\");\n        setTimeout(() => {\n            card.classList.remove(\"is-flipped\");\n        }, 5000);\n    });\n\n    container.appendChild(battleField);\n    battleField.appendChild(scene);\n}\n\nwindow.application.blocks[\"generateMediumCards\"] = generatingMediumCards;\n\nfunction renderScreenMediumChallenge() {\n    container.textContent = \" \";\n\n    const header = document.createElement(\"div\");\n    header.classList.add(\"header\");\n\n    const buttonTime = document.createElement(\"button\");\n    buttonTime.classList.add(\"btn\", \"timer-button\");\n    buttonTime.textContent = \"старт/сбросить\";\n\n    let secs,\n        now,\n        timer,\n        mins = 0;\n\n    const timerField = document.createElement(\"span\");\n    timerField.classList.add(\"timer-field\");\n    timerField.textContent = \"0:00\";\n\n    function time() {\n        secs = Math.floor((Date.now() - now) / 1000);\n        if (secs === 60) {\n            now = Date.now();\n            mins++;\n        }\n        if (secs < 10) {\n            secs = \"0\" + secs;\n        }\n        timerField.innerHTML = mins + \":\" + secs;\n    }\n\n    buttonTime.onclick = function () {\n        now = Date.now();\n        mins = 0;\n        timer = setInterval(time);\n    };\n\n    const tryAgainButton = document.createElement(\"button\");\n    tryAgainButton.classList.add(\"btn\", \"try-again-button\");\n    tryAgainButton.textContent = \"Начать заново\";\n\n    tryAgainButton.addEventListener(\"click\", () => {\n        window.application.challenge = \"\";\n        window.application.renderScreen(\"start\");\n    });\n\n    container.appendChild(header);\n    header.appendChild(buttonTime);\n    header.appendChild(timerField);\n    header.appendChild(tryAgainButton);\n\n    window.application.renderBlock(\"generateMediumCards\", container);\n}\n\nwindow.application.screens[\"medium\"] = renderScreenMediumChallenge;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\nfunction generatingHardCards(container) {\n    const battleField = document.createElement(\"div\");\n    battleField.classList.add(\"battle-field\");\n\n    const scene = document.createElement(\"div\");\n    scene.classList.add(\"scene\");\n\n    let cardData = [];\n\n    function generateRandomCards() {\n        let cardListRandom = shuffledCardList.sort(() => Math.random() - 0.5);\n        for (let i = 0; i < 6; i++) {\n            cardData.push(cardListRandom[i]);\n        }\n        cardData = cardData.concat(cardData);\n    }\n\n    function createCard(cardData) {\n        const card = document.createElement(\"div\");\n        card.classList.add(\"CARD\");\n\n        const cardFront = document.createElement(\"div\");\n        cardFront.classList.add(\"card-face\", \"card-face-front\");\n        card.append(cardFront);\n\n        const cardBack = document.createElement(\"div\");\n        cardBack.classList.add(\"card-face\", \"card-face-back\");\n        cardBack.style.backgroundImage = `url(\"${cardData.img}\")`;\n        card.append(cardBack);\n\n        card.addEventListener(\"click\", function () {\n            card.classList.toggle(\"is-flipped\");\n        });\n\n        return card;\n    }\n\n    function renderCards() {\n        cardData.forEach((cardEl) => {\n            const card = createCard(cardEl);\n            scene.append(card);\n        });\n    }\n    generateRandomCards();\n    renderCards();\n\n    scene.querySelectorAll(\".CARD\").forEach((card) => {\n        console.log(card);\n        card.classList.add(\"is-flipped\");\n        setTimeout(() => {\n            card.classList.remove(\"is-flipped\");\n        }, 5000);\n    });\n\n    container.appendChild(battleField);\n    battleField.appendChild(scene);\n}\n\nwindow.application.blocks[\"generateHardCards\"] = generatingHardCards;\n\nfunction renderScreenHardChallenge() {\n    container.textContent = \" \";\n\n    const header = document.createElement(\"div\");\n    header.classList.add(\"header\");\n\n    const buttonTime = document.createElement(\"button\");\n    buttonTime.classList.add(\"btn\", \"timer-button\");\n    buttonTime.textContent = \"старт/сбросить\";\n\n    let secs,\n        now,\n        timer,\n        mins = 0;\n\n    const timerField = document.createElement(\"span\");\n    timerField.classList.add(\"timer-field\");\n    timerField.textContent = \"0:00\";\n\n    function time() {\n        secs = Math.floor((Date.now() - now) / 1000);\n        if (secs === 60) {\n            now = Date.now();\n            mins++;\n        }\n        if (secs < 10) {\n            secs = \"0\" + secs;\n        }\n        timerField.innerHTML = mins + \":\" + secs;\n    }\n\n    buttonTime.onclick = function () {\n        now = Date.now();\n        mins = 0;\n        timer = setInterval(time);\n    };\n\n    const tryAgainButton = document.createElement(\"button\");\n    tryAgainButton.classList.add(\"btn\", \"try-again-button\");\n    tryAgainButton.textContent = \"Начать заново\";\n\n    tryAgainButton.addEventListener(\"click\", () => {\n        window.application.challenge = \"\";\n        window.application.renderScreen(\"start\");\n    });\n\n    container.appendChild(header);\n    header.appendChild(buttonTime);\n    header.appendChild(timerField);\n    header.appendChild(tryAgainButton);\n\n    window.application.renderBlock(\"generateHardCards\", container);\n}\n\nwindow.application.screens[\"hard\"] = renderScreenHardChallenge;\n","/* eslint-disable no-unused-vars */\nconst noop = () => {};\nconst NO_PARAMS = {};\nconst NO_HEADERS = {};\nconst OK_200 = [200];\n\nfunction request({\n    method = \"GET\", // тип запроса\n    url, // url на который шлем запрос\n    params = NO_PARAMS, // список query параметров\n    headers = NO_HEADERS, // список заголовков запроса\n    body, // тело запроса, данные которые мы отправляем\n    responseType = \"json\", // тип ответа\n    requestType = \"json\", // тип запроса при отправке данных\n    okResponse = OK_200, // коды статусов обрабатываемых ответов\n    checkStatusInResponse = false, // флаг для проверки статуса ответа\n    onSuccess = noop, // функция обработки успешного ответа\n    onError = noop, // функция обработки сетевой ошибки\n}) {\n    // создали объект XMLHttpRequest\n    const req = new XMLHttpRequest();\n\n    // формируем строку query параметров вида param1=value1&param2=value2...\n    const urlParams = new URLSearchParams(params);\n    const queryString = urlParams.toString();\n\n    // конфигурация запроса перед отправкой, устанавливаем метод,\n    // url и добавляем query параметры, если они были переданы в поле params\n    req.open(method, url + (queryString ? `?${queryString}` : \"\"));\n\n    // устанавливаем заголовки, если был передан список заголовков в поле headers\n    Object.keys(headers).forEach((key) => {\n        req.setRequestHeader(key, headers[key]);\n    });\n\n    // устанавливаем тип ответа, по умолчанию ожидаем получить json\n    req.responseType = responseType;\n\n    // Функция обработки успешного запроса\n    req.onload = function (event) {\n        const target = event.target;\n        // проверяем коды статусов ответа, на соответствие полю okResponse\n        // если пришел, какой-то другой код, то обрабатываем ответ как ошибочный\n        if (!okResponse.includes(target.status)) {\n            onError(target.statusText);\n            return;\n        }\n\n        // проверяем статус в ответе\n        if (checkStatusInResponse && target.response.status !== \"ok\") {\n            onError(target.statusText);\n            return;\n        }\n\n        // передаем данные ответа в функцию onSuccess\n        onSuccess(target.response);\n    };\n\n    // функция обработки сетевой ошибки\n    req.onerror = function () {\n        onError();\n    };\n\n    // формируем тело запроса(данные) для отправки на сервер\n    let dataBody = body;\n\n    // устанавливаем заголовки и формат отправки данных\n    // в зависимости от типа запроса\n    if (requestType === \"urlencoded\") {\n        req.setRequestHeader(\n            \"content-type\",\n            \"application/x-www-form-urlencoded\"\n        );\n        const bodyParams = new URLSearchParams(body);\n        dataBody = bodyParams.toString();\n    }\n\n    if (requestType === \"json\") {\n        req.setRequestHeader(\"Content-type\", \"application/json\");\n        dataBody = JSON.stringify(body);\n    }\n\n    // отправляем запрос вместе с данными\n    req.send(dataBody);\n}\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}